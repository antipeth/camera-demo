    <!-- 初始黑色背景，当摄像头未开启时 -->
    <div
      id="videoContainer"
      class="relative w-full h-72 bg-black rounded-lg overflow-hidden"
    >
      <video
        id="videoElement"
        class="w-full h-auto max-w-full object-cover rounded-lg"
        autoPlay
        playsInline
        style="display: none; border-radius: 8px;"></video>
      <!-- 摄像头开关按钮，定位在视频容器的右边 -->
      <button
        type="button"
        class="absolute top-3 right-3 px-6 py-3 text-white bg-gradient-to-r from-cyan-500 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-cyan-300 dark:focus:ring-cyan-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2"
        id="toggleButton"
      >
        <!-- 播放图标 -->
        <svg
          id="playIcon"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          class="w-5 h-5"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M5 3l14 9-14 9V3z"></path>
        </svg>
        <!-- 暂停图标 -->
        <svg
          id="pauseIcon"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          class="w-6 h-6"
          style="display: none;"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 19V5h4v14H6zm8 0V5h4v14h-4z"></path>
        </svg>
      </button>
    </div>

<script>
  // 从 localStorage 获取自定义的后端 URL，如果没有则使用默认值
  const STREAM_URL =
    localStorage.getItem("backendURL") || "https://backend.com";
  // 拼接出获取文字信息的完整接口 URL
  const VIDEO_URL = `${STREAM_URL}/api/video`;

  let stream = null;
  let mediaRecorder = null;
  let isStreaming = false;

  const videoElement = document.getElementById("videoElement");
  const toggleButton = document.getElementById("toggleButton");
  const playIcon = document.getElementById("playIcon");
  const pauseIcon = document.getElementById("pauseIcon");

  // 启动摄像头并开始推流，同时在页面上显示视频预览
  const startStreaming = async () => {
    try {
      // 请求摄像头权限
      stream = await navigator.mediaDevices.getUserMedia({ video: true });

      // 设置本地预览
      videoElement.srcObject = stream;
      videoElement.style.display = "block"; // 显示 video 元素

      // 控制按钮图标：隐藏播放图标，显示暂停图标
      playIcon.style.display = "none";
      pauseIcon.style.display = "block";

      // 初始化 MediaRecorder，同时向后端发送视频流
      mediaRecorder = new MediaRecorder(stream, { mimeType: "video/webm" });
      mediaRecorder.ondataavailable = async (event) => {
        if (event.data.size > 0) {
          const formData = new FormData();
          formData.append("video", event.data);
          // 向后端发送视频数据
          await fetch(VIDEO_URL, {
            method: "POST",
            body: formData,
          });
        }
      };

      mediaRecorder.start(1000); // 每 1 秒发送一次数据
      isStreaming = true;
    } catch (err) {
      console.error("无法访问摄像头:", err);
    }
  };

  // 停止摄像头并结束推流，同时关闭预览
  const stopStreaming = () => {
    if (mediaRecorder && mediaRecorder.state !== "inactive") {
      mediaRecorder.stop();
    }
    if (stream) {
      stream.getTracks().forEach((track) => track.stop());
      stream = null;
    }
    // 隐藏视频预览
    videoElement.style.display = "none";

    // 控制按钮图标：显示播放图标，隐藏暂停图标
    playIcon.style.display = "block";
    pauseIcon.style.display = "none";

    isStreaming = false;
  };

  // 绑定按钮点击事件
  toggleButton.addEventListener("click", () => {
    if (isStreaming) {
      stopStreaming();
    } else {
      startStreaming();
    }
  });
</script>
